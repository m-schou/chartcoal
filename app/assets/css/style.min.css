/*!
 * fastshell
 * Fiercely quick and opinionated front-ends
 * https://HosseinKarami.github.io/fastshell
 * @author Hossein Karami
 * @version 1.0.5
 * Copyright 2018. MIT licensed.
 */
.clear:after,.clear:before{content:" ";display:table}.clear{*zoom:1}.clear:after{clear:both}*{box-sizing:border-box;font-smoothing:antialiased;text-rendering:optimizeLegibility}html{background:#f5f7fa}body{font:300 13px/1.6 Helvetica Neue,Helvetica,Arial;color:#444;transition:all .4s ease-in .3s}body,html{min-height:100vh}

/*! normalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block}audio:not([controls]){display:none;height:0}progress{vertical-align:baseline}[hidden],template{display:none}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:inherit;font-weight:bolder}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}svg:not(:root){overflow:hidden}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}figure{margin:1em 40px}hr{box-sizing:content-box;height:0;overflow:visible}button,input,select,textarea{font:inherit;margin:0}optgroup{font-weight:700}button,input{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-input-placeholder{color:inherit;opacity:.54}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}.header{background:#fff;border-bottom:2px solid rgba(35,42,59,.06)}.header .section{height:92px;max-width:1220px;-ms-flex-pack:justify;justify-content:space-between;margin:0 auto}.header .section,.header .section .nav ul{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.logo{margin:0}.nav ul{display:-ms-flexbox;display:flex;-ms-flex-pack:end;justify-content:flex-end;list-style:none}.nav ul li{margin-left:10px}.main{max-width:1220px;margin:0 auto 100px}.main header{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-align:center;align-items:center}.main .grid-container{display:-ms-grid;display:grid;height:1220px;-ms-grid-columns:(1fr)[12]/(1fr)[12];grid-template-columns:repeat(12,1fr)/repeat(12,1fr);grid-auto-columns:1fr;grid-auto-rows:1fr;grid-gap:20px}.main .grid-container .card{border-radius:6px;padding:15px;box-shadow:0 5px 20px 0 rgba(0,0,0,.08)}.main .grid-container .card-theme-blue{background-image:linear-gradient(90deg,#497fff,#4bb0ff);color:#fff}.main .grid-container .card-theme-white{background:#fff;color:#37394c}.main .grid-container .card-theme-white .reports h1,.main .grid-container .card-theme-white .reports h3{color:#fff}.main .grid-container .summary{-ms-flex-pack:justify;justify-content:space-between}.main .grid-container .summary,.main .grid-container .summary .reports{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.main .grid-container .summary .reports{padding:10px;margin:15px;height:120px;width:120px;border-radius:6px;background:#2d55b3;-ms-flex-direction:column;flex-direction:column}.main .grid-container .summary .reports h1,.main .grid-container .summary .reports h2,.main .grid-container .summary .reports h3{margin:0}.main .grid-container .summary .text{margin:15px}.main .grid-container .summary .text h2,.main .grid-container .summary .text h3{margin:0}.main .grid-container .pole-chart,.main .grid-container .pole-chart .chart1{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}.main .grid-container .pole-chart .chart1{padding:10px;margin:15px;border-radius:6px;background:#2d55b3;-ms-flex-wrap:wrap;flex-wrap:wrap}.main .grid-container .pole-chart .text{margin:15px}.main .grid-container .pole-chart .text h2,.main .grid-container .pole-chart .text h3{margin:0}.main .grid-container .curve-chart,.main .grid-container .curve-chart .chart2{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}.main .grid-container .curve-chart .chart2{padding:10px;margin:15px;border-radius:6px;background:#2d55b3;-ms-flex-wrap:wrap;flex-wrap:wrap}.main .grid-container .curve-chart .text{margin:15px}.main .grid-container .curve-chart .text h2,.main .grid-container .curve-chart .text h3{margin:0}.main .item1{overflow:scroll;grid-column:1/6;grid-row:1/3}.main .item2{overflow:scroll;max-width:100%;grid-column:6/9;grid-row:1/6}.main .item3{overflow:hidden;grid-column:9/13;grid-row:1/5}.main .item4{overflow:hidden;grid-column:1/3;grid-row:3/5}.main .item5{overflow:hidden;grid-column:3/6;grid-row:3/6}.main .item6{grid-row:5/11}.main .item6,.main .item7{overflow:hidden;grid-column:1/3}.main .item7{grid-row:11/12}.main .item8{overflow:hidden;grid-column:3/9;grid-row:6/12}.main .item9{overflow:hidden;grid-column:9/13;grid-row:5/10}.main .item10{grid-column:3/9}.main .item10,.main .item11{overflow:hidden;grid-row:12/13}.main .item11{grid-column:1/3}.main .item12{overflow:hidden;grid-column:9/13;grid-row:10/13}button{text-align:center}button a{color:#fff;text-decoration:none}.logout{font-weight:700;background-image:linear-gradient(90deg,#4bb0ff,#497fff)}.logout,.open-reports{font-family:Montserrat,sans-serif;height:36px;text-transform:uppercase;padding:0 20px;border-radius:36px;font-size:11px}.open-reports{font-style:bold;background:none}.open-reports a{color:dimgrey}h1{font-size:40px}h1,h2{font-family:Montserrat,sans-serif;font-weight:500}h2{font-size:30px}h3{font-family:Open Sans,sans-serif;font-weight:600;font-size:13px;line-height:20px}::selection{background:#333;color:#fff;text-shadow:none}::-moz-selection{background:#333;color:#fff;text-shadow:none}::-webkit-selection{background:#333;color:#fff;text-shadow:none}@media print{*{background:transparent!important;color:#000!important;box-shadow:none!important;text-shadow:none!important}a,a:visited{text-decoration:underline}a[href]:after{content:" (" attr(href) ")"}abbr[title]:after{content:" (" attr(title) ")"}.ir a:after,a[href^="#"]:after,a[href^="javascript:"]:after{content:""}blockquote,pre{border:1px solid #999;page-break-inside:avoid}thead{display:table-header-group}img,tr{page-break-inside:avoid}img{max-width:100%!important}@page{margin:.5cm}h2,h3,p{orphans:3;widows:3}h2,h3{page-break-after:avoid}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */

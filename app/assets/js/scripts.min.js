/*!
 * fastshell
 * Fiercely quick and opinionated front-ends
 * https://HosseinKarami.github.io/fastshell
 * @author Hossein Karami
 * @version 1.0.5
 * Copyright 2018. MIT licensed.
 */
function randomScalingFactor(){return Math.round(2*Math.random()*1e4)}!function(r,o,a,t){"use strict";r(function(){})}(jQuery,window,document);var ctx=document.getElementById("myChart").getContext("2d"),gradientStroke=ctx.createLinearGradient(500,0,100,0);gradientStroke.addColorStop(0,"#4f7ef6"),gradientStroke.addColorStop(1,"#4dd5ff");var chartColors={red:"rgb(255, 99, 132)",orange:"rgb(255, 159, 64)",yellow:"rgb(255, 205, 86)",green:"rgb(75, 192, 192)",blue:"rgb(54, 162, 235)",lightblue:"rgb(186, 206, 255)",lightgrey:"rgb(242, 242, 242)",purple:"rgb(153, 102, 255)",grey:"rgb(231,233,237)",transparent:"rgba(231,233,37,0)"},myChart=new Chart(ctx,{type:"line",data:{labels:["Mon","Tue","Wed","Thu","Fri","Sat","Sun","Mon"],datasets:[{label:"Current Week",borderColor:gradientStroke,pointBorderColor:gradientStroke,pointBackgroundColor:gradientStroke,pointHoverBackgroundColor:gradientStroke,pointHoverBorderColor:gradientStroke,pointHoverRadius:6,pointHoverBorderWidth:1,pointRadius:1,fill:!1,borderWidth:3,data:[randomScalingFactor(),randomScalingFactor(),randomScalingFactor(),randomScalingFactor(),randomScalingFactor(),randomScalingFactor(),randomScalingFactor(),randomScalingFactor()]},{label:"Previous Week",borderDash:[16,8],borderColor:chartColors.lightgrey,pointBorderColor:chartColors.lightgrey,pointBackgroundColor:chartColors.lightgrey,pointHoverBackgroundColor:chartColors.lightgrey,pointHoverBorderColor:chartColors.lightgrey,pointHoverRadius:6,pointHoverBorderWidth:1,pointRadius:1,fill:!1,borderWidth:3,data:[randomScalingFactor(),randomScalingFactor(),randomScalingFactor(),randomScalingFactor(),randomScalingFactor(),randomScalingFactor(),randomScalingFactor(),randomScalingFactor()]}]},options:{responsive:!0,maintainAspectRatio:!1,legend:{display:!1},scales:{yAxes:[{gridLines:{zeroLineColor:"transparent"},ticks:{fontColor:"rgba(0,0,0,0.5)",fontStyle:"normal",beginAtZero:!0,maxTicksLimit:5,padding:30}}],xAxes:[{gridLines:{zeroLineColor:"transparent",display:!1},ticks:{padding:30,fontColor:"rgba(0,0,0,0.2)",fontStyle:"normal"}}]},tooltips:{titleMarginBottom:12,bodySpacing:8,xPadding:15,yPadding:15}}});Chartist.plugins=Chartist.plugins||{};var data={labels:["January","","February","","March"],series:[[0,50,35,70,50,100],[0,45,25,55,35,70]]},options={low:0,high:100,showArea:!0,plugins:[],axisY:{onlyInteger:!0,offset:20},axisX:{showGrid:!1}},lineChart=new Chartist.Line(".slaChart",data,options);
//# sourceMappingURL=data:application/json;charset=utf8;base64,

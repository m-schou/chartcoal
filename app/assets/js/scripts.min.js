/*!
 * fastshell
 * Fiercely quick and opinionated front-ends
 * https://HosseinKarami.github.io/fastshell
 * @author Hossein Karami
 * @version 1.0.5
 * Copyright 2018. MIT licensed.
 */
function randomScalingFactor(){return Math.round(2*Math.random()*1e4)}!function(r,o,e,t){"use strict";r(function(){})}(jQuery,window,document);var ctx=document.getElementById("myChart").getContext("2d"),gradientStroke=ctx.createLinearGradient(500,0,100,0);gradientStroke.addColorStop(0,"#4f7ef6"),gradientStroke.addColorStop(1,"#4dd5ff");var chartColors={red:"rgb(255, 99, 132)",orange:"rgb(255, 159, 64)",yellow:"rgb(255, 205, 86)",green:"rgb(75, 192, 192)",blue:"rgb(54, 162, 235)",lightblue:"rgb(186, 206, 255)",lightgrey:"rgb(242, 242, 242)",purple:"rgb(153, 102, 255)",grey:"rgb(231,233,237)",transparent:"rgba(231,233,37,0)"},myChart=new Chart(ctx,{type:"line",data:{labels:["Mon","Tue","Wed","Thu","Fri","Sat","Sun","Mon"],datasets:[{label:"Current Week",borderColor:gradientStroke,pointBorderColor:gradientStroke,pointBackgroundColor:gradientStroke,pointHoverBackgroundColor:gradientStroke,pointHoverBorderColor:gradientStroke,pointBorderWidth:6,pointHoverRadius:6,pointHoverBorderWidth:1,pointRadius:1,fill:!1,borderWidth:3,data:[5e3,7e3,15e3,1e4,11e3,2e4,14e3,randomScalingFactor()]},{label:"Previous Week",borderDash:[16,8],borderColor:chartColors.lightgrey,pointBorderColor:chartColors.lightgrey,pointBackgroundColor:chartColors.lightgrey,pointHoverBackgroundColor:chartColors.lightgrey,pointHoverBorderColor:chartColors.lightgrey,pointBorderWidth:6,pointHoverRadius:6,pointHoverBorderWidth:1,pointRadius:1,fill:!1,borderWidth:3,data:[randomScalingFactor(),15e3,16e3,7e3,8e3,13e3,9e3,randomScalingFactor()]}]},options:{legend:{position:"bottom"},scales:{yAxes:[{ticks:{fontColor:"rgba(0,0,0,0.3)",fontStyle:"bold",beginAtZero:!0,maxTicksLimit:5,padding:30}}],xAxes:[{gridLines:{zeroLineColor:"transparent"},ticks:{padding:30,fontColor:"rgba(0,0,0,0.3)",fontStyle:"bold"}}]}}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,

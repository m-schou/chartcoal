/*!
 * fastshell
 * Fiercely quick and opinionated front-ends
 * https://HosseinKarami.github.io/fastshell
 * @author Hossein Karami
 * @version 1.0.5
 * Copyright 2018. MIT licensed.
 */
function randomScalingFactor(){return Math.round(100*Math.random())}function lineData(){return{type:"line",data:{labels:["Mon","Tue","Wed","Thu","Fri","Sat","Sun","Mon"],datasets:[{label:"My First dataset",borderColor:chartColors.red,data:[randomScalingFactor(),randomScalingFactor(),randomScalingFactor(),randomScalingFactor(),randomScalingFactor(),randomScalingFactor(),randomScalingFactor(),randomScalingFactor()]},{label:"My Second dataset",borderColor:chartColors.blue,data:[randomScalingFactor(),randomScalingFactor(),randomScalingFactor(),randomScalingFactor(),randomScalingFactor(),randomScalingFactor(),randomScalingFactor(),randomScalingFactor()]}]},options:{maintainAspectRation:!1,responsive:!0,title:{display:!0},tooltips:{mode:"index"},hover:{mode:"index"},scales:{xAxes:[{scaleLabel:{display:!0}}],yAxes:[{stacked:!0,scaleLabel:{display:!0}}]}}}}!function(a,r,n,t){"use strict";a(function(){})}(jQuery,window,document);var chartColors={red:"rgb(255, 99, 132)",orange:"rgb(255, 159, 64)",yellow:"rgb(255, 205, 86)",green:"rgb(75, 192, 192)",blue:"rgb(54, 162, 235)",purple:"rgb(153, 102, 255)",grey:"rgb(231,233,237)"},$this=$(window);$this.resize(function(){$this.width()<500&&($("#lineChart").height()<500&&$("#lineChart").height(500),console.log($("#lineChart").height()))});var lineData=lineData(),ctx=document.getElementById("lineChart").getContext("2d"),myNewChartA=new Chart(ctx,lineData);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMuanMiXSwibmFtZXMiOlsicmFuZG9tU2NhbGluZ0ZhY3RvciIsIk1hdGgiLCJyb3VuZCIsInJhbmRvbSIsImxpbmVEYXRhIiwidHlwZSIsImRhdGEiLCJsYWJlbHMiLCJkYXRhc2V0cyIsImxhYmVsIiwiYm9yZGVyQ29sb3IiLCJjaGFydENvbG9ycyIsInJlZCIsImJsdWUiLCJvcHRpb25zIiwibWFpbnRhaW5Bc3BlY3RSYXRpb24iLCJyZXNwb25zaXZlIiwidGl0bGUiLCJkaXNwbGF5IiwidG9vbHRpcHMiLCJtb2RlIiwiaG92ZXIiLCJzY2FsZXMiLCJ4QXhlcyIsInNjYWxlTGFiZWwiLCJ5QXhlcyIsInN0YWNrZWQiLCIkIiwid2luZG93IiwiZG9jdW1lbnQiLCJ1bmRlZmluZWQiLCJqUXVlcnkiLCJvcmFuZ2UiLCJ5ZWxsb3ciLCJncmVlbiIsInB1cnBsZSIsImdyZXkiLCIkdGhpcyIsInJlc2l6ZSIsIndpZHRoIiwiaGVpZ2h0IiwiY29uc29sZSIsImxvZyIsImN0eCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0Q29udGV4dCIsIm15TmV3Q2hhcnRBIiwiQ2hhcnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBc0NBLFFBQUFBLHVCQUNBLE1BQUFDLE1BQUFDLE1BQUEsSUFBQUQsS0FBQUUsVUFPQSxRQUFBQyxZQUNBLE9BQ0FDLEtBQUEsT0FDQUMsTUFDQUMsUUFBQSxNQUFBLE1BQUEsTUFBQSxNQUFBLE1BQUEsTUFBQSxNQUFBLE9BQ0FDLFdBQ0FDLE1BQUEsbUJBQ0FDLFlBQUFDLFlBQUFDLElBRUFOLE1BQ0FOLHNCQUNBQSxzQkFDQUEsc0JBQ0FBLHNCQUNBQSxzQkFDQUEsc0JBQ0FBLHNCQUNBQSx5QkFHQVMsTUFBQSxvQkFDQUMsWUFBQUMsWUFBQUUsS0FFQVAsTUFDQU4sc0JBQ0FBLHNCQUNBQSxzQkFDQUEsc0JBQ0FBLHNCQUNBQSxzQkFDQUEsc0JBQ0FBLDBCQWtDQWMsU0FDQUMsc0JBQUEsRUFDQUMsWUFBQSxFQUNBQyxPQUNBQyxTQUFBLEdBR0FDLFVBQ0FDLEtBQUEsU0FFQUMsT0FDQUQsS0FBQSxTQUVBRSxRQUNBQyxRQUNBQyxZQUNBTixTQUFBLEtBSUFPLFFBQ0FDLFNBQUEsRUFDQUYsWUFDQU4sU0FBQSxTQXRJQSxTQUFBUyxFQUFBQyxFQUFBQyxFQUFBQyxHQUVBLFlBRUFILEdBQUEsZUFJQUksT0FBQUgsT0FBQUMsU0FNQSxJQUFBbEIsY0FDQUMsSUFBQSxvQkFDQW9CLE9BQUEsb0JBQ0FDLE9BQUEsb0JBQ0FDLE1BQUEsb0JBQ0FyQixLQUFBLG9CQUNBc0IsT0FBQSxxQkFDQUMsS0FBQSxvQkFFQUMsTUFBQVYsRUFBQUMsT0FDQVMsT0FBQUMsT0FBQSxXQUdBRCxNQUFBRSxRQUFBLE1BRUFaLEVBQUEsY0FBQWEsU0FBQSxLQUNBYixFQUFBLGNBQUFhLE9BQUEsS0FFQUMsUUFBQUMsSUFBQWYsRUFBQSxjQUFBYSxZQVNBLElBQUFwQyxVQUFBQSxXQUNBdUMsSUFBQWQsU0FBQWUsZUFBQSxhQUFBQyxXQUFBLE1BQ0FDLFlBQUEsR0FBQUMsT0FBQUosSUFBQXZDIiwiZmlsZSI6InNjcmlwdHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgJChmdW5jdGlvbiAoKSB7XG4gICAgLy8gRmFzdFNoZWxsXG4gIH0pO1xuXG59KShqUXVlcnksIHdpbmRvdywgZG9jdW1lbnQpO1xuXG5cbi8vIENIQVJUIEpTIC1zdGFydFxuXG5cbnZhciBjaGFydENvbG9ycyA9IHtcbiAgICByZWQ6ICdyZ2IoMjU1LCA5OSwgMTMyKScsXG4gICAgb3JhbmdlOiAncmdiKDI1NSwgMTU5LCA2NCknLFxuICAgIHllbGxvdzogJ3JnYigyNTUsIDIwNSwgODYpJyxcbiAgICBncmVlbjogJ3JnYig3NSwgMTkyLCAxOTIpJyxcbiAgICBibHVlOiAncmdiKDU0LCAxNjIsIDIzNSknLFxuICAgIHB1cnBsZTogJ3JnYigxNTMsIDEwMiwgMjU1KScsXG4gICAgZ3JleTogJ3JnYigyMzEsMjMzLDIzNyknXG59O1xudmFyICR0aGlzID0gJCh3aW5kb3cpXG4kdGhpcy5yZXNpemUoZnVuY3Rpb24oKXtcblxuICAgIC8vXG4gICAgaWYoJHRoaXMud2lkdGgoKTw1MDAgKXsgLy8gJiYgJChcIiNsaW5lQ2hhcnRcIikuaGVpZ2h0KCkgPCAxMjBcblxuICAgICAgICBpZigkKFwiI2xpbmVDaGFydFwiKS5oZWlnaHQoKTw1MDApe1xuICAgICAgICAgICAgJChcIiNsaW5lQ2hhcnRcIikuaGVpZ2h0KDUwMClcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZygkKFwiI2xpbmVDaGFydFwiKS5oZWlnaHQoKSk7XG4gICAgfVxuXG59KTtcblxuXG5mdW5jdGlvbiByYW5kb21TY2FsaW5nRmFjdG9yKCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMDApO1xufVxudmFyIGxpbmVEYXRhID0gbGluZURhdGEoKTtcbnZhciBjdHggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxpbmVDaGFydFwiKS5nZXRDb250ZXh0KFwiMmRcIik7XG52YXJcdG15TmV3Q2hhcnRBID0gbmV3IENoYXJ0KGN0eCwgbGluZURhdGEpO1xuXG5cbmZ1bmN0aW9uIGxpbmVEYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdsaW5lJyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgbGFiZWxzOiBbXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIiwgXCJTdW5cIiwgXCJNb25cIl0sXG4gICAgICAgICAgICBkYXRhc2V0czogW3tcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJNeSBGaXJzdCBkYXRhc2V0XCIsXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGNoYXJ0Q29sb3JzLnJlZCxcbiAgICAgICAgICAgICAgICAvLyBiYWNrZ3JvdW5kQ29sb3I6IGNoYXJ0Q29sb3JzLnJlZCxcbiAgICAgICAgICAgICAgICBkYXRhOiBbXG4gICAgICAgICAgICAgICAgICAgIHJhbmRvbVNjYWxpbmdGYWN0b3IoKSxcbiAgICAgICAgICAgICAgICAgICAgcmFuZG9tU2NhbGluZ0ZhY3RvcigpLFxuICAgICAgICAgICAgICAgICAgICByYW5kb21TY2FsaW5nRmFjdG9yKCksXG4gICAgICAgICAgICAgICAgICAgIHJhbmRvbVNjYWxpbmdGYWN0b3IoKSxcbiAgICAgICAgICAgICAgICAgICAgcmFuZG9tU2NhbGluZ0ZhY3RvcigpLFxuICAgICAgICAgICAgICAgICAgICByYW5kb21TY2FsaW5nRmFjdG9yKCksXG4gICAgICAgICAgICAgICAgICAgIHJhbmRvbVNjYWxpbmdGYWN0b3IoKSxcbiAgICAgICAgICAgICAgICAgICAgcmFuZG9tU2NhbGluZ0ZhY3RvcigpXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxhYmVsOiBcIk15IFNlY29uZCBkYXRhc2V0XCIsXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGNoYXJ0Q29sb3JzLmJsdWUsXG4gICAgICAgICAgICAgICAgLy8gYmFja2dyb3VuZENvbG9yOiBjaGFydENvbG9ycy5ibHVlLFxuICAgICAgICAgICAgICAgIGRhdGE6IFtcbiAgICAgICAgICAgICAgICAgICAgcmFuZG9tU2NhbGluZ0ZhY3RvcigpLFxuICAgICAgICAgICAgICAgICAgICByYW5kb21TY2FsaW5nRmFjdG9yKCksXG4gICAgICAgICAgICAgICAgICAgIHJhbmRvbVNjYWxpbmdGYWN0b3IoKSxcbiAgICAgICAgICAgICAgICAgICAgcmFuZG9tU2NhbGluZ0ZhY3RvcigpLFxuICAgICAgICAgICAgICAgICAgICByYW5kb21TY2FsaW5nRmFjdG9yKCksXG4gICAgICAgICAgICAgICAgICAgIHJhbmRvbVNjYWxpbmdGYWN0b3IoKSxcbiAgICAgICAgICAgICAgICAgICAgcmFuZG9tU2NhbGluZ0ZhY3RvcigpLFxuICAgICAgICAgICAgICAgICAgICByYW5kb21TY2FsaW5nRmFjdG9yKClcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vICAgICB7XG4gICAgICAgICAgICAvLyAgICAgbGFiZWw6IFwiTXkgVGhpcmQgZGF0YXNldFwiLFxuICAgICAgICAgICAgLy8gICAgIGJvcmRlckNvbG9yOiBjaGFydENvbG9ycy5ncmVlbixcbiAgICAgICAgICAgIC8vICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNoYXJ0Q29sb3JzLmdyZWVuLFxuICAgICAgICAgICAgLy8gICAgIGRhdGE6IFtcbiAgICAgICAgICAgIC8vICAgICAgICAgcmFuZG9tU2NhbGluZ0ZhY3RvcigpLFxuICAgICAgICAgICAgLy8gICAgICAgICByYW5kb21TY2FsaW5nRmFjdG9yKCksXG4gICAgICAgICAgICAvLyAgICAgICAgIHJhbmRvbVNjYWxpbmdGYWN0b3IoKSxcbiAgICAgICAgICAgIC8vICAgICAgICAgcmFuZG9tU2NhbGluZ0ZhY3RvcigpLFxuICAgICAgICAgICAgLy8gICAgICAgICByYW5kb21TY2FsaW5nRmFjdG9yKCksXG4gICAgICAgICAgICAvLyAgICAgICAgIHJhbmRvbVNjYWxpbmdGYWN0b3IoKSxcbiAgICAgICAgICAgIC8vICAgICAgICAgcmFuZG9tU2NhbGluZ0ZhY3RvcigpXG4gICAgICAgICAgICAvLyAgICAgXSxcbiAgICAgICAgICAgIC8vIH0sIHtcbiAgICAgICAgICAgIC8vICAgICBsYWJlbDogXCJNeSBUaGlyZCBkYXRhc2V0XCIsXG4gICAgICAgICAgICAvLyAgICAgYm9yZGVyQ29sb3I6IGNoYXJ0Q29sb3JzLnllbGxvdyxcbiAgICAgICAgICAgIC8vICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNoYXJ0Q29sb3JzLnllbGxvdyxcbiAgICAgICAgICAgIC8vICAgICBkYXRhOiBbXG4gICAgICAgICAgICAvLyAgICAgICAgIHJhbmRvbVNjYWxpbmdGYWN0b3IoKSxcbiAgICAgICAgICAgIC8vICAgICAgICAgcmFuZG9tU2NhbGluZ0ZhY3RvcigpLFxuICAgICAgICAgICAgLy8gICAgICAgICByYW5kb21TY2FsaW5nRmFjdG9yKCksXG4gICAgICAgICAgICAvLyAgICAgICAgIHJhbmRvbVNjYWxpbmdGYWN0b3IoKSxcbiAgICAgICAgICAgIC8vICAgICAgICAgcmFuZG9tU2NhbGluZ0ZhY3RvcigpLFxuICAgICAgICAgICAgLy8gICAgICAgICByYW5kb21TY2FsaW5nRmFjdG9yKCksXG4gICAgICAgICAgICAvLyAgICAgICAgIHJhbmRvbVNjYWxpbmdGYWN0b3IoKVxuICAgICAgICAgICAgLy8gICAgIF0sXG4gICAgICAgICAgICAvLyB9XG5cbiAgICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgbWFpbnRhaW5Bc3BlY3RSYXRpb246ZmFsc2UsXG4gICAgICAgICAgICByZXNwb25zaXZlOiB0cnVlLFxuICAgICAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICAgICAgICAgIC8vIHRleHQ6IFwiTGluZSBDaGFydCAtIFN0YWNrZWQgQXJlYVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbHRpcHM6IHtcbiAgICAgICAgICAgICAgICBtb2RlOiAnaW5kZXgnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhvdmVyOiB7XG4gICAgICAgICAgICAgICAgbW9kZTogJ2luZGV4J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgICAgIHhBeGVzOiBbe1xuICAgICAgICAgICAgICAgICAgICBzY2FsZUxhYmVsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGFiZWxTdHJpbmc6ICdNb250aCdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgICAgIHlBeGVzOiBbe1xuICAgICAgICAgICAgICAgICAgICBzdGFja2VkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBzY2FsZUxhYmVsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGFiZWxTdHJpbmc6ICdWYWx1ZSdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG4vLyBDSEFSVCBKUyAtZW5kIl19
